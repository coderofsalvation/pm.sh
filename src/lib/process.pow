process:log()
  { which logger &>/dev/null && date +"%Y-%m-%d %H:%M:%S $*" | logger -t pm; } &>/dev/null
  date +"%Y-%m-%d %H:%M:%S $*"

process:gettmpfile(appname)
  if empty appname 
    return 0
  echo $app_config_dir/apps/$(basename $appname)

process:getpidfile(appname)
  echo $(process:gettmpfile $appname).pid

process:getpid(appname)
  local pidfile=$(process:getpidfile $appname)
  if -f $pidfile
    cat $pidfile
  else 
    echo -1

process:getlockfile(appname)
  local tmpfile=$(process:gettmpfile $appname)
  echo $tmpfile.lock

process:getlogfile(appname)
  local tmpfile=$(process:gettmpfile $appname)
  echo $tmpfile.log

process:exec(appname)
  shift 
  cnt=0
  lockfile=$(process:getlockfile $appname)
  deffile=$(process:gettmpfile $appname).def
  cntfile=$(process:gettmpfile $appname).cnt
  workdir=$(apps:getworkdir $deffile)
  startcmd=$(apps:getstartcmd $deffile)
  cd $workdir
  set +e
  #trap "process:log \"#$cnt: $appname killed \$?\"; pkill -P $$" EXIT SIGHUP SIGINT SIGTERM
  process:setenv $workdir
  echo $cnt > $cntfile
  while :
    process:log "#$cnt $appname started [pid $$]: ${startcmd}"
    flock -n $lockfile ${startcmd}
    code="$?"                                 # check exit status code
    exit="EXIT"
    if $code == 129
      exit=SIGHUP
    if $code == 130
      exit=SIGINT
    if $code == 143
      exit=SIGTERM
    process:log "#$cnt $appname $exit [$code]"
    event:trigger $appname exit "#$cnt exitcode $code"
    event:trigger $appname restart $cnt
    sleep 3s                                  # wait for seconds until next boot
    cnt=$(($cnt+1))                           # increment counter
    echo $cnt > $cntfile
    # handle odd/buggy case 
    if $cnt > 50
      event:trigger $appname error "restarted > 50 times"
      $selfpath/pm stop $appname              

process:setenv(workdir)
  if -f $workdir/env.sh
    source $workdir/env.sh
  if -f $workdir/env.production.sh
    source $workdir/env.production.sh

process:inspect(appname)
  apps:exit_if_nonexists $appname
  deffile=$(process:gettmpfile $appname).def
  pidfile=$(process:gettmpfile $appname).pid
  logfile=$(process:getlogfile $appname)
  lockfile=$(process:getlockfile $appname)
  startcmd=$(apps:getstartcmd $deffile)
  workdir=$(apps:getworkdir $deffile)
  pidvalue="n/a"
  if -f $pidfile
    pidvalue=$(<$pidfile)
  echo "appname                : "$appname
  echo "startcommand           : "$startcmd
  echo "workdir                : "$workdir
  echo "application definition : "$deffile
  echo "pidfile                : "$pidfile
  echo "logfile stdout         : "$logfile.stdout
  echo "logfile stderr         : "$logfile.stderr
  echo "lockfile               : "$lockfile
  echo "pidvalue               : "$pidvalue
  echo "repository             : "$(process:getrepo $appname)
  process:setenv $workdir
  set > $tmpfile.1
  set > $tmpfile.2
  diff -Nau $tmpfile.1 $tmpfile.2 | grep -E '^\+[A-Za-z][A-Za-z_0-9]+=' | sed 's/^+/environment            : /g'
  if ! -f pidfile
    echo -e "\nps. some files weren't created yet. Use 'pm start <appname>' first."

process:startall()
  apps:every process:start

process:stopall()
  apps:every process:stop

process:start(appname)
  apps:exit_if_nonexists $appname
  deffile=$(process:gettmpfile $appname).def
  pidfile=$(process:gettmpfile $appname).pid
  logfile=$(process:getlogfile $appname)
  lockfile=$(process:getlockfile $appname)
  flock -n $lockfile sleep 0.1s || { echo "already started"; exit 1; }
  nohup $selfpath/pm exec $appname 1>$logfile.stdout 2>$logfile.stderr &
  echo $! > $pidfile 
  echo "$appname started"
  event:trigger $appname start
  if -n $LOG
    process:tail $appname

process:tail(appname)
  apps:exit_if_nonexists $appname
  deffile=$(process:gettmpfile $appname).def
  logfile=$(process:getlogfile $appname)
  echo -e "$(date) press CTRL-C to stop logmonitor:\n"
  tail -q -f $logfile.*

process:killtree(pid)
  pids="$pid";
  while pgrep -P $pid &>/dev/null
    pid=$(pgrep -P $pid)
    pids="$pids $pid"
  echo "killing pids: $pids"
  kill -9 ${pids}

process:stop(appname)
  shift # remove first arg
  pid=$(process:getpid $appname)
  cntfile=$(process:gettmpfile $appname).cnt
  lockfile=$(process:getlockfile $appname)
  if ! $pid == "-1"
    rm $(process:getpidfile $appname)
    process:killtree $pid
    sleep 2s
    rm $lockfile
    touch $lockfile
  else
    echo "$appname is not running"
  echo 0 > $cntfile
  if $appname == "pmserver"
    server:kill
  event:trigger $appname stop

process:restart(appname)
  cntfile=$(process:gettmpfile $appname).cnt
  event:trigger $appname restart
  set +e ; process:stop $appname ; set -e
  process:start $appname

process:getport(appname)
  deffile=$(process:gettmpfile $appname).def
  workdir=$(apps:getworkdir $deffile)
  portfile=$(process:gettmpfile $appname).port
  port="none"
  if cd $workdir &>/dev/null 
    if -f env.sh
      source env.sh &>/dev/null
    if -f env.production.sh
      source env.sh &>/dev/null
    if -n $PORT
      port=$PORT
  if -f $portfile
    port=$(<$portfile)
  echo "$port"

process:ps(appname,apppath)
  lockfile=$(process:getlockfile $appname)
  cntfile=$(process:gettmpfile $appname).cnt
  ps="$(ps aux)"
  set +e
  psapp="$(echo "$ps" | fgrep $appname | fgrep flock | head -n1)"
  restarts=0
  if -f $cntfile
    restarts=$(cat $cntfile)
  status="stopped"
  port=$(process:getport $appname)
  if not empty $psapp
    status="running"
  fmt="%-20s %-8s %-6s %-10s %s\n"
  if ! empty $FORMAT
    fmt="$FORMAT"
  printf "$fmt" "$appname" "$status" $port $restarts "$psapp" | string:wraplines

process:status()
  cols="$(ps au | head -n1)"                        # print cols header
  if empty $FORMAT
    printf "%-20s %-8s %-6s %-10s %s\n\n" "APP" "STATUS" "PORT" "RESTARTS" "$cols" | string:wraplines
  apps:every process:ps

process:list(appname)
  apps:every echo | awk '{ print $1 }'

process:getrepo(appname)
  deffile=$(process:gettmpfile $appname).def
  workdir=$(apps:getworkdir $deffile)
  cd $workdir
  if -f .git/config 
    repo="$( cat .git/config | grep url | head -n1 | sed 's/.*\///g' )"
    branch="$( git branch 2>&1 | grep "^*" | sed 's/ //g;s/^*//g'   )"
    hash="$(git rev-parse HEAD 2>/dev/null)"
    echo "$repo(${branch}:${hash:0:4})"

process:debug(appname)
  process:inspect $appname
  process:exec $appname

